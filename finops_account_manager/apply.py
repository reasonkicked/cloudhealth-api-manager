"""
apply.py

Applies a CloudHealth update plan generated by plan.py.
Supports dry-run and limit mode to cap number of updates.
"""
import json
import argparse
import logging
import sys
import requests

# configure logger
g_logger = logging.getLogger(__name__)
g_logger.setLevel(logging.INFO)
handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(logging.Formatter("%(asctime)s [%(levelname)s] %(message)s"))
g_logger.addHandler(handler)

def apply_plan(plan_path, api_key, client_api_id, dry_run=False, limit=None):
    """
    Applies updates to CloudHealth based on a plan file.

    :param plan_path: path to JSON plan
    :param api_key: CloudHealth API key
    :param client_api_id: CloudHealth client_api_id
    :param dry_run: if True, only log actions
    :param limit: max number of accounts to update (None = all)
    """
    try:
        with open(plan_path) as f:
            plan = json.load(f)
    except Exception as e:
        g_logger.error(f"Failed to load plan file: {e}")
        sys.exit(1)

    base_url = 'https://chapi.cloudhealthtech.com/v1/aws_accounts'
    headers = {'Content-Type': 'application/json'}

    applied = 0
    for entry in plan:
        if limit is not None and applied >= limit:
            g_logger.info(f"Limit of {limit} reached, stopping further updates.")
            break

        ch_id = entry.get('ch_id')
        new_name = entry.get('new_name')
        tags = entry.get('tags', {})

        payload = {
            'name': new_name,
            'tags': [
                {'key': 'ou-level1', 'value': tags.get('ou-level1', '')},
                {'key': 'ou-level2', 'value': tags.get('ou-level2', '')}
            ]
        }

        g_logger.info(f"Updating CH id {ch_id}: new_name='{new_name}', tags={tags}")
        if dry_run:
            g_logger.info(f"Dry-run: skipping actual PUT for {ch_id}")
        else:
            params = {'api_key': api_key, 'client_api_id': client_api_id}
            url = f"{base_url}/{ch_id}"
            try:
                resp = requests.put(url, params=params, json=payload, headers=headers, timeout=30)
                resp.raise_for_status()
                g_logger.info(f"Success: updated {ch_id}")
            except requests.RequestException as e:
                g_logger.error(f"Failed to update {ch_id}: {e}")

        applied += 1

    g_logger.info(f"Total updates attempted: {applied}")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Apply update plan to CloudHealth')
    parser.add_argument('--plan', required=True, help='Path to plan.json')
    parser.add_argument('--api-key', required=True, help='CloudHealth API key')
    parser.add_argument('--client-api-id', required=True, help='CloudHealth client_api_id')
    parser.add_argument('--dry-run', action='store_true', help='Do not send PUT requests')
    parser.add_argument('--limit', type=int, help='Max number of accounts to update')
    args = parser.parse_args()
    apply_plan(
        args.plan,
        args.api_key,
        args.client_api_id,
        dry_run=args.dry_run,
        limit=args.limit
    )
